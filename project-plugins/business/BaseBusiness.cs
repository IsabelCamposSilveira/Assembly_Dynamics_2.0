//------------------------------------------------------------------------------
// <auto-generated>
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Query;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Json;
using System.Text;
using System.Threading.Tasks;
using project_plugins.earlybound;
using project_plugins.MultiLanguage;
using project_plugins.Models;

namespace project_plugins.Business
{
    public abstract class BaseBusiness
    {
        protected ITracingService TracingService = null;
        protected IOrganizationService Service { get; }
        protected IOrganizationService ServiceAdmin { get; }
        protected List<Resx> Messages { get; }

        protected BaseBusiness(IOrganizationService service)
        {
            Service = service;
        }
        protected BaseBusiness(IOrganizationService service, ITracingService tracingService)
        {
            Service = service;
            TracingService = tracingService;
        }
        protected BaseBusiness(IOrganizationService service, IOrganizationService serviceAdmin, ITracingService tracingService, List<Resx> messages = null)
        {
            Messages = messages != null ? messages : new List<Resx>();
            Service = service;
            ServiceAdmin = serviceAdmin;
            TracingService = tracingService;
        }
        protected void AddTrace(string format, params object[] args)
        {
            if (TracingService != null)
            {
                TracingService.Trace(format, args);
            }
        }
        protected object GetValueAliasedValue(Entity entity, string attribute)
        {
            return entity.Contains(attribute) ? ((AliasedValue)entity[attribute]).Value : null;
        }
        protected Guid Create(Entity entity)
        {
            return Service.Create(entity);
        }
        protected void Update(Entity entity)
        {
            Service.Update(entity);
        }
        protected UpsertResponse Upsert(Entity entity)
        {
            var request = new UpsertRequest() { Target = entity };

            return (UpsertResponse)Service.Execute(request);
        }
        protected T Retrieve<T>(Guid id, params string[] columns) where T : Entity, new()
        {
            var columnSet = (columns == null || columns.Length == 0) ? new ColumnSet(true) : new ColumnSet(columns);
            var logicalName = new T().LogicalName;
            var entity = Service.Retrieve(logicalName, id, columnSet);

            return entity.ToEntity<T>();
        }
        public T ReadToObjectT<T>(string json)
        {
            Type typeParameterType = typeof(T);

            using (MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(json)))
            {
                DataContractJsonSerializer ser = new DataContractJsonSerializer(typeParameterType);
                var retorno = (T)Convert.ChangeType(ser.ReadObject(ms), typeof(T));
                ms.Close();
                return retorno;
            }
        }
        protected List<ExecuteMultipleResponse> UpdateMultipleRequest(IEnumerable<Entity> list, bool continueOnError = false, bool returnResponses = false, int countByRequest = 999)
        {
            var multipleRequests = new List<OrganizationRequest>();

            foreach (var item in list)
            {
                multipleRequests.Add(new UpdateRequest
                {
                    Target = item
                });
            }

            return MultipleRequest(multipleRequests, continueOnError, returnResponses, countByRequest);
        }
        public List<ExecuteMultipleResponse> UpdateMultipleRequestParallel(IEnumerable<Entity> list, bool continueOnError = false, bool returnResponses = false, int countByRequest = 999, int maxDegreeOfParallelism = -1)
        {
            var multipleRequests = new List<OrganizationRequest>();

            foreach (var item in list)
            {
                multipleRequests.Add(new UpdateRequest
                {
                    Target = item.ToEntity<Entity>()
                });
            }

            return MultipleRequestParallel(multipleRequests, continueOnError, returnResponses, countByRequest, maxDegreeOfParallelism);
        }
        public List<ExecuteMultipleResponse> ExecuteMultipleRequestParallel(List<OrganizationRequest> list, bool continueOnError = false, bool returnResponses = false, int countByRequest = 999, int maxDegreeOfParallelism = -1)
        {
            return MultipleRequestParallel(list, continueOnError, returnResponses, countByRequest, maxDegreeOfParallelism);
        }
        public void UpdateMultipleParallel(IEnumerable<Entity> list, int maxDegreeOfParallelism = -1)
        {
            var uddateRequests = new List<UpdateRequest>();
            var exceptions = new ConcurrentQueue<Exception>();

            foreach (var item in list)
            {
                uddateRequests.Add(new UpdateRequest
                {
                    Target = item
                });
            }

            Parallel.For(0,
            uddateRequests.Count,
            new ParallelOptions() { MaxDegreeOfParallelism = maxDegreeOfParallelism },
            x =>
            {
                try
                {
                    Service.Execute(uddateRequests[x]);
                }
                catch (Exception ex)
                {
                    exceptions.Enqueue(ex);
                }

            }
            );

            if (exceptions.Count > 0)
            {
                throw exceptions.First<Exception>();
            }

        }
        public void ExecuteMultipleParallel(List<OrganizationRequest> list, int maxDegreeOfParallelism = -1)
        {
            var exceptions = new ConcurrentQueue<Exception>();

            Parallel.For(0,
            list.Count,
            new ParallelOptions() { MaxDegreeOfParallelism = maxDegreeOfParallelism },
            x =>
            {
                try
                {
                    Service.Execute(list[x]);
                }
                catch (Exception ex)
                {
                    exceptions.Enqueue(ex);
                }

            }
            );

            if (exceptions.Count > 0)
            {
                throw exceptions.First<Exception>();
            }
        }
        protected List<ExecuteMultipleResponse> CreateMultipleRequest(IEnumerable<Entity> list, bool continueOnError = false, bool returnResponses = false, int countByRequest = 999)
        {
            var multipleRequests = new List<OrganizationRequest>();

            foreach (var item in list)
            {
                multipleRequests.Add(new CreateRequest
                {
                    Target = item.ToEntity<Entity>()
                });
            }

            return MultipleRequest(multipleRequests, continueOnError, returnResponses, countByRequest);
        }
        protected List<ExecuteMultipleResponse> ExecuteMultipleRequest(List<OrganizationRequest> list, bool continueOnError = false, bool returnResponses = false, int countByRequest = 999)
        {
            return MultipleRequest(list, continueOnError, returnResponses, countByRequest);
        }
        public List<ExecuteMultipleResponse> CreateMultipleRequestParallel(IEnumerable<Entity> list, bool continueOnError = false, bool returnResponses = false, int countByRequest = 999, int maxDegreeOfParallelism = -1)
        {
            var multipleRequests = new List<OrganizationRequest>();

            foreach (var item in list)
            {
                multipleRequests.Add(new CreateRequest
                {
                    Target = item.ToEntity<Entity>()
                });
            }

            return MultipleRequestParallel(multipleRequests, continueOnError, returnResponses, countByRequest, maxDegreeOfParallelism);
        }
        public void CreateMultipleParallel(IEnumerable<Entity> list, int maxDegreeOfParallelism = -1)
        {
            var createRequests = new List<CreateRequest>();
            var exceptions = new ConcurrentQueue<Exception>();

            foreach (var item in list)
            {
                createRequests.Add(new CreateRequest
                {
                    Target = item
                });
            }

            Parallel.For(
                0,
            createRequests.Count,
            new ParallelOptions() { MaxDegreeOfParallelism = maxDegreeOfParallelism },
            x =>
            {
                try
                {
                    Service.Execute(createRequests[x]);
                }
                catch (Exception ex)
                {
                    exceptions.Enqueue(ex);
                }

            }
            );

            if (exceptions.Count > 0)
            {
                throw exceptions.First<Exception>();
            }
        }
        protected List<ExecuteMultipleResponse> DeleteMultipleRequest(IEnumerable<Entity> list, bool continueOnError = false, bool returnResponses = false, int countByRequest = 999)
        {
            var multipleRequests = new List<OrganizationRequest>();

            foreach (var item in list)
            {
                multipleRequests.Add(new DeleteRequest
                {
                    Target = item.ToEntityReference()
                });
            }

            return MultipleRequest(multipleRequests, continueOnError, returnResponses, countByRequest);
        }
        protected List<ExecuteMultipleResponse> DeleteMultipleRequestParallel(IEnumerable<Entity> list, bool continueOnError = false, bool returnResponses = false, int countByRequest = 999, int maxDegreeOfParallelism = -1)
        {
            var multipleRequests = new List<OrganizationRequest>();

            foreach (var item in list)
            {
                multipleRequests.Add(new DeleteRequest
                {
                    Target = item.ToEntityReference()
                });
            }

            return MultipleRequestParallel(multipleRequests, continueOnError, returnResponses, countByRequest, -1);
        }
        protected void DeleteMultipleParallel(IEnumerable<Entity> list, int maxDegreeOfParallelism = -1)
        {
            var deleteRequests = new List<DeleteRequest>();
            var exceptions = new ConcurrentQueue<Exception>();

            foreach (var item in list)
            {
                deleteRequests.Add(new DeleteRequest
                {
                    Target = item.ToEntityReference()
                });
            }

            Parallel.For(0,
            deleteRequests.Count,
            new ParallelOptions() { MaxDegreeOfParallelism = maxDegreeOfParallelism },
            x =>
            {
                try
                {
                    ExecuteMultipleResponse respostas = (ExecuteMultipleResponse)Service.Execute(deleteRequests[x]);

                }
                catch (Exception ex)
                {
                    exceptions.Enqueue(ex);
                }

            });

            if (exceptions.Count > 0)
            {
                throw exceptions.First<Exception>();
            }

        }
        public List<OrganizationRequest> CalculateRollupFieldMultipleRequest(IEnumerable<Entity> list, string[] columns, bool continueOnError = false, bool returnResponses = false, int countByRequest = 99)
        {
            var multipleRequests = new List<OrganizationRequest>();

            foreach (var item in list)
            {
                foreach (var column in columns)
                {
                    multipleRequests.Add(new CalculateRollupFieldRequest
                    {
                        Target = item.ToEntityReference(),
                        FieldName = column
                    });
                }
            }

            return multipleRequests;
        }
        protected List<ExecuteMultipleResponse> CalculateRollupFieldMultipleRequest(Entity item, string[] columns, bool continueOnError = false, bool returnResponses = false, int countByRequest = 254)
        {
            var multipleRequests = new List<OrganizationRequest>();

            foreach (var column in columns)
            {
                multipleRequests.Add(new CalculateRollupFieldRequest
                {
                    Target = item.ToEntityReference(),
                    FieldName = column
                });
            }

            return MultipleRequest(multipleRequests, continueOnError, returnResponses, countByRequest);
        }
        protected List<OrganizationResponse> CalculateRollupField(Entity item, string[] columns)
        {
            var multipleRequests = new List<OrganizationRequest>();

            var responses = new List<OrganizationResponse>();

            foreach (var column in columns)
            {
                var request = new CalculateRollupFieldRequest
                {
                    Target = item.ToEntityReference(),
                    FieldName = column
                };

                responses.Add(Service.Execute(request));
            }

            return responses;
        }
        protected List<OrganizationResponse> CalculateRollupField(EntityReference item, string[] columns)
        {
            var multipleRequests = new List<OrganizationRequest>();

            var responses = new List<OrganizationResponse>();

            foreach (var column in columns)
            {
                var request = new CalculateRollupFieldRequest
                {
                    Target = item,
                    FieldName = column
                };

                responses.Add(Service.Execute(request));
            }

            return responses;
        }
        public List<ExecuteMultipleResponse> MultipleRequest(List<OrganizationRequest> list, bool continueOnError, bool returnResponses, int countByRequest)
        {
            var multipleRequests = new ExecuteMultipleRequest()
            {
                Settings = new ExecuteMultipleSettings()
                {
                    ContinueOnError = continueOnError,
                    ReturnResponses = returnResponses
                },
                Requests = new OrganizationRequestCollection()
            };

            var result = new List<ExecuteMultipleResponse>();

            foreach (var item in list)
            {
                multipleRequests.Requests.Add(item);

                if (multipleRequests.Requests.Count() >= countByRequest)
                {
                    var response = (ExecuteMultipleResponse)Service.Execute(multipleRequests);
                    result.Add(response);

                    if (response.IsFaulted && !continueOnError) break;

                    multipleRequests.Requests.Clear();
                }

            }

            if (multipleRequests.Requests.Any())
            {
                var response = (ExecuteMultipleResponse)Service.Execute(multipleRequests);
                result.Add(response);
            }
            return result;
        }
        public List<ExecuteMultipleResponse> MultipleRequestParallel(List<OrganizationRequest> list, bool continueOnError, bool returnResponses, int countByRequest, int maxDegreeOfParallelism = -1)
        {
            List<ExecuteMultipleRequest> lstRequests = new List<ExecuteMultipleRequest>();
            var exceptions = new ConcurrentQueue<Exception>();
            var responses = new ConcurrentQueue<ExecuteMultipleResponse>();

            var multipleRequests = new ExecuteMultipleRequest()
            {
                Settings = new ExecuteMultipleSettings()
                {
                    ContinueOnError = continueOnError,
                    ReturnResponses = returnResponses
                },
                Requests = new OrganizationRequestCollection()
            };

            var result = new List<ExecuteMultipleResponse>();

            foreach (var item in list)
            {
                multipleRequests.Requests.Add(item);

                if (multipleRequests.Requests.Count() >= countByRequest)
                {
                    lstRequests.Add(multipleRequests);

                    multipleRequests = new ExecuteMultipleRequest()
                    {
                        Settings = new ExecuteMultipleSettings()
                        {
                            ContinueOnError = continueOnError,
                            ReturnResponses = returnResponses
                        },
                        Requests = new OrganizationRequestCollection()
                    };
                }

            }

            if (multipleRequests.Requests.Count() > 0)
            {
                lstRequests.Add(multipleRequests);
            }

            Parallel.For(0,
                        lstRequests.Count,
                        new ParallelOptions() { MaxDegreeOfParallelism = maxDegreeOfParallelism },
                        x =>
                        {
                            try
                            {
                                ExecuteMultipleResponse respostas = (ExecuteMultipleResponse)Service.Execute(lstRequests[x]);
                                responses.Enqueue(respostas);
                            }
                            catch (Exception ex)
                            {
                                exceptions.Enqueue(ex);
                            }

                        }
                        );

            if (exceptions.Count > 0)
            {
                throw exceptions.First<Exception>();
            }

            return responses.ToList<ExecuteMultipleResponse>();
        }
        protected List<string> GetLabels(string entityLogicalName, params string[] attributesName)
        {
            var retrieveDetails = new RetrieveEntityRequest
            {
                EntityFilters = EntityFilters.Attributes,
                LogicalName = entityLogicalName,
                RetrieveAsIfPublished = true
            };

            var retrieveEntityResponseObj = (RetrieveEntityResponse)Service.Execute(retrieveDetails);
            var metadata = retrieveEntityResponseObj.EntityMetadata;
            var labels = new List<string>();

            foreach (var attributeMetadata in metadata.Attributes)
            {
                if (attributesName.Any(x => x.ToLower() == attributeMetadata.LogicalName.ToLower()))
                {
                    labels.Add(attributeMetadata.DisplayName.UserLocalizedLabel.Label);
                }
            }

            return labels;
        }
        public void ThrowFirstExcepition(List<ExecuteMultipleResponse> list)
        {
            foreach (var responses in list)
            {
                if (responses.IsFaulted)
                {
                    throw new InvalidPluginExecutionException(responses.Responses.First(x => x.Fault != null).Fault.Message);
                }
            }
        }
        public bool CompareEntityAttributes(Entity entity, Entity preImage, params string[] excecoes)
        {
            var retorno = false;

            foreach (var item in entity.Attributes.Where(x => x.Value != null))
            {
                if (excecoes.Any(x => string.Equals(x, item.Key, StringComparison.CurrentCultureIgnoreCase))) continue;

                if (preImage.Contains(item.Key))
                    retorno = !item.Value.Equals(preImage[item.Key]);

                if (retorno) break;
            }
            return retorno;
        }

        /// <summary>
        /// Método que capitura e retorna o ID do usuario
        /// </summary>
        /// <returns></returns>
        public Guid UserID()
        {
            Guid userID = ((WhoAmIResponse)Service.Execute(new WhoAmIRequest())).UserId;
            return userID;
        }

        /// <summary>
        /// Retorna as informações relacionadas ao usuário
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        public SystemUser GetSystemUserInfos(Guid userId)
        {
            return Service.Retrieve(
                SystemUser.EntityLogicalName,
                userId,
                new ColumnSet(SystemUser.Fields.FullName,
                SystemUser.Fields.BusinessUnitId,
                SystemUser.Fields.PositionId,
                SystemUser.Fields.ParentSystemUserId)).ToEntity<SystemUser>();
        }

        /// <summary>
        /// Método que busca os Direitos de Acesso de um usuario
        /// </summary>
        /// <param name="userID"></param>
        /// <returns></returns>
        public List<EntityReference> GetUserRoles(Guid userId)
        {
            using (var organizationContext = new CrmServiceContext(ServiceAdmin))
            {
                return (from roles in organizationContext.RoleSet
                        join systemrules in organizationContext.SystemUserRolesSet
                        on roles.RoleId equals systemrules.RoleId
                        where systemrules.SystemUserId == userId
                        select new EntityReference()
                        {
                            Id = roles.Id,
                            Name = roles.Name
                        }).ToList();
            }
        }

        /// <summary>
        /// Método que busca as Equipes que um usuario faz parte
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        public List<Team> GetTeams(Guid userId)
        {
            using (var organizationContext = new CrmServiceContext(ServiceAdmin))
            {
                return (from team in organizationContext.TeamSet
                        join teamUsers in organizationContext.TeamMembershipSet
                        on team.TeamId equals teamUsers.TeamId
                        where teamUsers.SystemUserId == userId
                        select new Team()
                        {
                            Id = team.Id,
                            Name = team.Name,
                            BusinessUnitId = team.BusinessUnitId
                        }).ToList();
            }
        }

        /// <summary>
        /// Método que busca os Direitos de Acesso das Equipes que um usuario faz parte
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        public List<EntityReference> GetRolesTeams(Guid userId)
        {
            using (var organizationContext = new CrmServiceContext(Service))
            {
                return (from roles in organizationContext.RoleSet
                        join teamRoles in organizationContext.TeamRolesSet on roles.RoleId equals teamRoles.RoleId
                        join teamUsers in organizationContext.TeamMembershipSet on teamRoles.TeamId equals teamUsers.TeamId
                        where teamUsers.SystemUserId == userId
                        select new EntityReference()
                        {
                            Id = roles.Id,
                            Name = roles.Name
                        }).ToList();
            }
        }

        /// <summary>
        /// Método utilizado para o usuario possa selecionar quais dados ele deseja que o programa retorne
        /// </summary>
        /// <param name="userName"></param>
        /// <param name="position"></param>
        /// <param name="businessUnit"></param>
        /// <param name="gerente"></param>
        /// <param name="dirAcessUsuario"></param>
        /// <param name="teams"></param>
        /// <param name="dirAcessEquipe"></param>
        public SystemUserInfos GetSystemUserInfos(Guid userId, Boolean findUserRoles = false, Boolean findTeams = false, Boolean findTeamRoles = false)
        {
            try
            {
                SystemUser systemUser = GetSystemUserInfos(userId);
                List<EntityReference> userRoles = findUserRoles ? GetUserRoles(userId) : new List<EntityReference>();
                List<Team> userTeams = findTeams ? GetTeams(userId) : new List<Team>();
                List<EntityReference> teamRoles = findTeamRoles ? GetRolesTeams(userId) : new List<EntityReference>();

                SystemUserInfos systemUserInfos = new SystemUserInfos(systemUser, userRoles, userTeams, teamRoles);

                return systemUserInfos;
            }
            catch (ArgumentNullException argumentNullException)
            {
                throw argumentNullException;
            }
            catch (Exception exception)
            {
                throw exception;
            }
        }
    }
}
